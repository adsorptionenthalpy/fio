/** Fio Finance header file
 *  Description: FioFinance smart contract supports funds request and approval.
 *  @author Ciju John
 *  @file fio.finance.hpp
 *  @copyright Dapix
 *
 *  Changes:
 */


#pragma once

#include <eosiolib/eosio.hpp>
#include <string>
#include <eosiolib/singleton.hpp>
#include <eosiolib/asset.hpp>


using std::string;

namespace fioio {

    using namespace eosio;

    // Transaction types
    // Very specific and explicit on transaction details.
    // Transaction version will be handled by defining new transaction type.
    enum class trx_type {
        NO_REQ_RPRT=    0,  // report without request
        REQUEST=        1,  // funds request
        REQ_RPRT=       2,  // request fulfilment report
        RCPT_VRFY=      3   // recipient verification
    };
    // User printable transaction description strings.
    const std::vector<std::string> trx_type_str {
        "report without request",
         "funds request",
         "request fulfilment report",
         "recipient verification"
    };
    // data format of transactions
    const std::vector<std::string> trx_type_dta{
        R"({"obtid":"%s"})",                //NO_REQ_RPRT: obtid
        R"({"reqid":"%d","memo":"%s"})",    // REQUEST: memo
        R"({"obtid":"%s","memo":"%s"})",    // REQ_RPRT: obtid, memo
        R"({"obtid":"%s","memo":"%s"})",    // RCPT_VRFY
    };
    // Transaction status types.
    // Even though this is similar to transaction type its more generic and can be carried across transaction versions.
    // Does not specify transaction details.
    enum class trx_sts {
        RPRT=           0,  // report
        REQUEST=        1,  // funds request
        RCPT_VRFY=      2   // recipient verification
    };
    // User printable transaction description strings.
    const std::vector<std::string> trx_sts_str {
            "reported",
            "requested",
            "verified by recipient"
    };

    // Supported chains
    enum  class chain_type {
        FIO=    0,
        EOS=    1,
        BTC=    2,
        ETH=    3,
        XMR=    4,
        BRD=    5,
        BCH=    6,
        NONE=   7
    };
    // User printable supported chains strings.
    const std::vector<std::string> chain_str {
        "FIO",
        "EOS",
        "BTC",
        "ETH",
        "XMR",
        "BRD",
        "BCH"
    };

    // Structure for FIO transaction chain meta data data.
    // A single object per FIO transaction chain.
    // FIO transaction chain is a series of linked individual blockchain transactions.
    // @abi table trxmetadata i64
    struct trxmetadata {
        uint64_t    fioappid;   // unique id representing a chain of linked blockchain transactions, generated by the FIO app
        name        originator; // funds originator
        name        receiver;   // funds receiver
        uint16_t    chain;      // chain_type enumeration representing supported chain
        string      asset;      // asset being transferred
        double      quantity;   // asset quantity being transferred

        uint64_t primary_key() const    { return fioappid; }
        uint64_t by_originator() const  { return originator; }
        uint64_t by_receiver() const    { return receiver; }
        EOSLIB_SERIALIZE(trxmetadata, (fioappid)(originator)(receiver)(chain)(asset)(quantity))
    };
    // transactions meta-data table
    typedef multi_index<N(trxmetadatas), trxmetadata,
            indexed_by<N(byoriginator), const_mem_fun<trxmetadata, uint64_t, &trxmetadata::by_originator> >,
            indexed_by<N(byreceiver), const_mem_fun<trxmetadata, uint64_t, &trxmetadata::by_receiver> >
    > transactions_metadata_table;

    // Structure for FIO transaction chain updates
    // Chain of objects representing audit trail of a FIO transaction chain
    // @abi table trxlogs i64
    struct trxlog {
        uint64_t fioappid;  // key to trxmetadata table
        uint16_t type;      // log message of type ${trx_type}
        uint16_t status;    // status message of type ${trx_sts}
        time time;          // transaction received (by blockchain) time
        string memo;        // user generated memo
        string data;        // data binding specific to transaction type. Defined in ${trx_type_dta}

        uint64_t primary_key() const    { return fioappid; }
        EOSLIB_SERIALIZE(trxlog, (fioappid)(type)(status)(time)(memo)(data))
    };
    // transactions log table
    typedef multi_index<N(trxlogs), trxlog > transaction_logs_table;

    // Structure for FIO funds request
    // This is a temporary structure for holding pending requests. Once request is reported it will be erased
    // @abi table pendreqsts i64
    struct fundsrequest {
        uint32_t    requestid;  // user supplied request id, mainly for user to track requests
        uint64_t    fioappid;   // key to trxmetadata table
        name        originator; // funds originator
        name        receiver;   // funds receiver

        uint64_t primary_key() const    { return requestid; }
        uint64_t by_originator() const  { return originator; }
        uint64_t by_receiver() const    { return receiver; }
        EOSLIB_SERIALIZE(fundsrequest, (requestid)(fioappid)(originator)(receiver))
    };
    // funds requests table
    typedef multi_index<N(pendreqsts), fundsrequest,
            indexed_by<N(byoriginator), const_mem_fun<fundsrequest, uint64_t, &fundsrequest::by_originator> >,
            indexed_by<N(byreceiver), const_mem_fun<fundsrequest, uint64_t, &fundsrequest::by_receiver> >
    > pending_requests_table;


    struct config {
        name tokencontr; // owner of the token contract

        EOSLIB_SERIALIZE(config, (tokencontr))
    };
    typedef singleton<N(configs), config> configs;

    struct contr_state {
        uint64_t current_obt = 0; // obt generator

        EOSLIB_SERIALIZE(contr_state, (current_obt))
    };
    typedef singleton<N(state), contr_state> statecontainer;
}
