#!/bin/bash

# set up a wallet just for holding the key used during blockchain ignition

bioshost=$BIOS_HOSTNAME
if [ -z "$bioshost" ]; then
   bioshost=localhost
fi

biosport=$BIOS_HTTP_PORT
if [ -z "$biosport" ]; then
    biosport=8788
fi

wddir=eosio-ignition-wd
wdaddr=127.0.0.1:8899
wdurl=http://$wdaddr
# Manual deployers, add a line below this block that looks like:
#    bioshost=$BIOS_HOSTNAME
#    biosport=$BIOS_HTTP_PORT
#    cnt_dir=$CONTRACT_DIR
#    sys=$SYS_CONTRACT
# where $BIOS_HOSTNAME is replaced by the hostname portion of the http-server-address configured
# for the nodeos instance running to bios producer
# ------ DO NOT ALTER THE NEXT LINE -------
###INSERT envars
bioshost=HTTP-SERVER-ADDRESS

logfile=$wddir/bootlog.txt

if [ -e $wddir ]; then
    rm -rf $wddir
fi
mkdir $wddir

step=1
echo Initializing ignition sequence  at $(date) | tee $logfile

echo "http-server-address = $wdaddr" > $wddir/config.ini

echo executing: keosd --config-dir $wddir --data-dir $wddir | tee -a $logfile
programs/keosd/keosd --config-dir $wddir --data-dir $wddir 2> $wddir/wdlog.txt &
echo $$ > ignition_wallet.pid
echo keosd log in $wddir/wdlog.txt >> $logfile
sleep 1

ecmd () {
    echo ===== Start: $step ============ >> $logfile
    echo executing: cleos --wallet-url $wdurl --url http://$bioshost:$biosport $* | tee -a $logfile
    echo ----------------------- >> $logfile
    programs/cleos/cleos  --wallet-url $wdurl --url http://$bioshost:$biosport $* >> $logfile 2>&1
    echo ==== End: $step ============== >> $logfile
    step=$(($step + 1))
}

wcmd () {
    ecmd wallet $*
}

cacmd () {
    programs/cleos/cleos  --wallet-url $wdurl --url http://$bioshost:$biosport system newaccount --transfer --stake-net "10000000.0000 FIO" --stake-cpu "10000000.0000 FIO"  --buy-ram "10000000.0000 FIO" eosio $* >> $logfile 2>&1
    ecmd system regproducer $1 $2
    ecmd system voteproducer prods $1 $1
}

sleep 2
ecmd get info

wcmd create --to-console -n ignition

# Manual deployers, add a line below this block that looks like:
#    wcmd import -n ignition --private-key $PRODKEY[0]
#    wcmd import -n ignition --private-key $PRODKEY[1]
#    ...
#    wcmd import -n ignition --private-key $PRODKEY[20]
# where $BIOSKEY is replaced by the private key for the bios node
# ------ DO NOT ALTER THE NEXT LINE -------
###INSERT prodkeys
wcmd import -n ignition --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3

ecmd set contract eosio contracts/eosio.bios eosio.bios.wasm eosio.bios.abi

# Create required system accounts
# ecmd create key --to-console
# pubsyskey=`grep "^Public key:" $logfile | tail -1 | sed "s/^Public key://"`
# prisyskey=`grep "^Private key:" $logfile | tail -1 | sed "s/^Private key://"`
pubsyskey=EOS7isxEua78KPVbGzKemH4nj2bWE52gqj8Hkac3tc7jKNvpfWzYS
prisyskey=5KBX1dwHME4VyuUss2sYM25D5ZTDvyYrbEz37UJqwAVAsR4tGuY
echo eosio.* keys: $prisyskey $pubsyskey >> $logfile
echo eosio. keys: prisyskey: $prisyskey, pubsyskey: $pubsyskey
wcmd import -n ignition --private-key $prisyskey
ecmd create account eosio eosio.bpay $pubsyskey $pubsyskey
ecmd create account eosio eosio.msig $pubsyskey $pubsyskey
ecmd create account eosio eosio.names $pubsyskey $pubsyskey
ecmd create account eosio eosio.ram $pubsyskey $pubsyskey
ecmd create account eosio eosio.ramfee $pubsyskey $pubsyskey
ecmd create account eosio eosio.saving $pubsyskey $pubsyskey
ecmd create account eosio eosio.stake $pubsyskey $pubsyskey
ecmd create account eosio eosio.token $pubsyskey $pubsyskey
ecmd create account eosio eosio.vpay $pubsyskey $pubsyskey
ecmd create account eosio eosio.sudo $pubsyskey $pubsyskey

ecmd create account eosio fio.token $pubsyskey $pubsyskey
ecmd create account eosio fio.system $pubsyskey $pubsyskey
ecmd create account eosio fio.fee $pubsyskey $pubsyskey
ecmd create account eosio fio.name $pubsyskey $pubsyskey
ecmd create account eosio fio.finance $pubsyskey $pubsyskey

ecmd set contract eosio.token contracts/eosio.token eosio.token.wasm eosio.token.abi
ecmd set contract eosio.msig contracts/eosio.msig eosio.msig.wasm eosio.msig.abi
ecmd set contract eosio.sudo contracts/eosio.sudo eosio.sudo.wasm eosio.sudo.abi

#ecmd set contract fio.token contracts/eosio.token eosio.token.wasm eosio.token.abi

echo ===== Start: $step ============ >> $logfile
echo executing: cleos --wallet-url $wdurl --url http://$bioshost:$biosport push action eosio.token create '[ "eosio", "20000000000.0000 FIO" ]' -p eosio.token | tee -a $logfile
echo executing: cleos --wallet-url $wdurl --url http://$bioshost:$biosport push action eosio.token issue '[ "eosio", "2000000000.0000 FIO", "memo" ]' -p eosio | tee -a $logfile
echo ----------------------- >> $logfile

programs/cleos/cleos --wallet-url $wdurl --url http://$bioshost:$biosport push action eosio.token create '[ "eosio", "20000000000.0000 FIO" ]' -p eosio.token >> $logfile 2>&1
programs/cleos/cleos --wallet-url $wdurl --url http://$bioshost:$biosport push action eosio.token issue '[ "eosio", "20000000000.0000 FIO", "memo" ]' -p eosio >> $logfile 2>&1

echo ==== End: $step ============== >> $logfile
step=$(($step + 1))

ecmd set contract eosio contracts/eosio.system eosio.system.wasm eosio.system.abi
# TBD prod conditional
#ecmd set contract fio.system contracts/fio.name fio.name.wasm fio.name.abi
#ecmd set contract fio.finance contracts/fio.finance fio.finance.wasm fio.finance.abi

# Manual deployers, add a series of lines below this block that looks like:
#    cacmd $PRODNAME[0] $OWNERKEY[0] $ACTIVEKEY[0]
#    cacmd $PRODNAME[1] $OWNERKEY[1] $ACTiVEKEY[1]
#    ...
#    cacmd $PRODNAME[20] $OWNERKEY[20] $ACTIVEKEY[20]
# where $PRODNAME is the producer account name and $OWNERKEY and $ACTIVEKEY are both the producer's
# public key
# ------ DO NOT ALTER THE NEXT LINE -------
###INSERT cacmd

pkill -15 keosd
